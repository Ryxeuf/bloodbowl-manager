{% extends 'base.html.twig' %}

{% block title %}Match {{ game.homeTeam.name }} vs {{ game.awayTeam.name }} - Blood Bowl Manager{% endblock %}

{% block body %}
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="bg-white shadow overflow-hidden sm:rounded-lg">
            <div class="px-4 py-5 sm:px-6">
                <div class="flex items-center justify-between mb-4">
                    <div class="text-2xl font-bold text-gray-900">
                        {{ game.homeTeam.name }}
                    </div>
                    <div class="text-4xl font-bold text-gray-900">
                        {{ game.homeScore }} - {{ game.awayScore }}
                    </div>
                    <div class="text-2xl font-bold text-gray-900">
                        {{ game.awayTeam.name }}
                    </div>
                </div>
                <div class="text-center text-lg text-gray-500">
                    Tour {{ game.currentTurn }}
                </div>
            </div>
            <div class="border-t border-gray-200">
                <div class="px-4 py-5 sm:px-6">
                    <div class="flex gap-8">
                        <!-- Terrain de Blood Bowl -->
                        <div class="w-[480px]">
                            <div class="border-4 border-gray-800">
                                {% for i in 1..26 %}
                                    <div class="flex {% if i == 1 %}border-b-2 border-white{% elseif i == 26 %}border-t-2 border-white{% elseif i == 12 %}border-b-2 border-white{% endif %}">
                                        {% for j in 1..15 %}
                                            {% set player = game.playerStates|filter(p => p.x == i and p.y == j)|first %}
                                            <div class="w-8 h-8 {% if i == 1 or i == 26 %}bg-green-500 hover:bg-green-400{% else %}bg-green-700 hover:bg-green-600{% endif %} cursor-pointer relative {% if j == 4 or j == 11 %}border-r-2 border-white{% endif %} player-cell {% if player %}player-cell-{{ player.player.id }}{% endif %}" 
                                                 data-player-id="{{ player ? player.player.id : '' }}"
                                                 data-x="{{ i }}"
                                                 data-y="{{ j }}">
                                                {% if player %}
                                                    <div class="absolute inset-0 flex items-center justify-center text-white text-[8px] font-bold">
                                                        {{ player.player.number }}
                                                    </div>
                                                    {% if player.state == 'prone' %}
                                                        <div class="absolute inset-0 bg-black bg-opacity-50"></div>
                                                    {% elseif player.state == 'stunned' %}
                                                        <div class="absolute inset-0 bg-yellow-500 bg-opacity-50"></div>
                                                    {% elseif player.state == 'ko' %}
                                                        <div class="absolute inset-0 bg-orange-500 bg-opacity-50"></div>
                                                    {% elseif player.state == 'injured' %}
                                                        <div class="absolute inset-0 bg-red-500 bg-opacity-50"></div>
                                                    {% elseif player.state == 'dead' %}
                                                        <div class="absolute inset-0 bg-gray-900 bg-opacity-50"></div>
                                                    {% endif %}
                                                {% endif %}
                                            </div>
                                        {% endfor %}
                                    </div>
                                {% endfor %}
                            </div>

                            <!-- Légende des états -->
                            <div class="mt-4 flex justify-center space-x-4">
                                <div class="flex items-center">
                                    <div class="w-4 h-4 bg-black bg-opacity-50 mr-2"></div>
                                    <span class="text-sm">Prone</span>
                                </div>
                                <div class="flex items-center">
                                    <div class="w-4 h-4 bg-yellow-500 bg-opacity-50 mr-2"></div>
                                    <span class="text-sm">Stunned</span>
                                </div>
                                <div class="flex items-center">
                                    <div class="w-4 h-4 bg-orange-500 bg-opacity-50 mr-2"></div>
                                    <span class="text-sm">KO</span>
                                </div>
                                <div class="flex items-center">
                                    <div class="w-4 h-4 bg-red-500 bg-opacity-50 mr-2"></div>
                                    <span class="text-sm">Injured</span>
                                </div>
                                <div class="flex items-center">
                                    <div class="w-4 h-4 bg-gray-900 bg-opacity-50 mr-2"></div>
                                    <span class="text-sm">Dead</span>
                                </div>
                            </div>

                            <div class="mt-8 text-center">
                                <form method="post">
                                    <input type="hidden" name="action" value="next_turn">
                                    <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                        Tour suivant
                                    </button>
                                </form>
                            </div>
                        </div>

                        <!-- Panneau des informations du joueur -->
                        <div id="playerPanel" class="flex-1 max-w-md hidden">
                            <div class="sticky top-4 bg-white shadow-lg rounded-lg p-4">
                                <div class="flex justify-between items-center mb-4">
                                    <h3 class="text-lg font-bold">Informations du joueur</h3>
                                    <button id="closePanel" class="text-gray-500 hover:text-gray-700">
                                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                        </svg>
                                    </button>
                                </div>
                                <div id="playerInfo" class="space-y-4">
                                    <!-- Les informations du joueur seront injectées ici via JavaScript -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const playerPanel = document.getElementById('playerPanel');
            const playerInfo = document.getElementById('playerInfo');
            const closePanel = document.getElementById('closePanel');
            const playerCells = document.querySelectorAll('.player-cell');
            let selectedPlayerId = null;
            let availableMoves = [];

            playerCells.forEach(cell => {
                cell.addEventListener('click', function() {
                    const playerId = this.dataset.playerId;
                    if (playerId) {
                        // Retirer la sélection précédente
                        if (selectedPlayerId) {
                            document.querySelectorAll(`.player-cell-${selectedPlayerId}`).forEach(cell => {
                                cell.classList.remove('selected-player');
                            });
                        }

                        // Retirer les cases disponibles
                        document.querySelectorAll('.available-move, .dice-roll-required').forEach(cell => {
                            cell.classList.remove('available-move', 'dice-roll-required');
                        });

                        // Ajouter la sélection au nouveau joueur
                        document.querySelectorAll(`.player-cell-${playerId}`).forEach(cell => {
                            cell.classList.add('selected-player');
                        });
                        selectedPlayerId = playerId;

                        // Afficher le panneau
                        playerPanel.classList.remove('hidden');

                        // Récupérer les informations du joueur
                        fetch(`/player/${playerId}/info`)
                            .then(response => response.text())
                            .then(html => {
                                playerInfo.innerHTML = html;
                                // Ajouter les écouteurs d'événements aux boutons d'action
                                addActionButtonListeners();
                            })
                            .catch(error => {
                                console.error('Erreur lors de la récupération des informations du joueur:', error);
                            });
                    }
                });
            });

            function addActionButtonListeners() {
                const actionButtons = playerInfo.querySelectorAll('.action-btn');
                console.log('Action buttons found:', actionButtons.length);
                
                actionButtons.forEach(button => {
                    button.addEventListener('click', function() {
                        console.log('Button clicked:', this.dataset.action);
                        const action = this.dataset.action;
                        if (action === 'move' && selectedPlayerId) {
                            console.log('Fetching available moves for player:', selectedPlayerId);
                            // Récupérer les cases disponibles
                            fetch(`/game/{{ game.id }}/player/${selectedPlayerId}/available-moves`)
                                .then(response => {
                                    console.log('Response status:', response.status);
                                    return response.json();
                                })
                                .then(data => {
                                    console.log('Available moves:', data.availableMoves);
                                    // Retirer les anciennes cases disponibles
                                    document.querySelectorAll('.available-move, .dice-roll-required').forEach(cell => {
                                        cell.classList.remove('available-move', 'dice-roll-required');
                                    });

                                    // Ajouter les nouvelles cases disponibles
                                    data.availableMoves.forEach(move => {
                                        const cell = document.querySelector(`[data-x="${move.x}"][data-y="${move.y}"]`);
                                        if (cell) {
                                            cell.classList.add(move.requiresDiceRoll ? 'dice-roll-required' : 'available-move');
                                        }
                                    });
                                })
                                .catch(error => {
                                    console.error('Erreur lors de la récupération des cases disponibles:', error);
                                });
                        }
                    });
                });
            }

            closePanel.addEventListener('click', function() {
                playerPanel.classList.add('hidden');
                // Retirer la sélection
                if (selectedPlayerId) {
                    document.querySelectorAll(`.player-cell-${selectedPlayerId}`).forEach(cell => {
                        cell.classList.remove('selected-player');
                    });
                    selectedPlayerId = null;
                }
                // Retirer les cases disponibles
                document.querySelectorAll('.available-move, .dice-roll-required').forEach(cell => {
                    cell.classList.remove('available-move', 'dice-roll-required');
                });
            });
        });
    </script>

    <style>
        .selected-player {
            position: relative;
        }
        .selected-player::after {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            border: 2px solid #3B82F6;
            border-radius: 50%;
            z-index: 10;
            animation: pulse 2s infinite;
        }
        .available-move {
            position: relative;
        }
        .available-move::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border: 2px solid #10B981;
            z-index: 5;
            animation: pulse 2s infinite;
        }
        .dice-roll-required {
            position: relative;
        }
        .dice-roll-required::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border: 2px solid #F97316;
            z-index: 5;
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% {
                transform: scale(1);
                opacity: 1;
            }
            50% {
                transform: scale(1.05);
                opacity: 0.8;
            }
            100% {
                transform: scale(1);
                opacity: 1;
            }
        }
    </style>
{% endblock %} 