{% extends 'base.html.twig' %}

{% block title %}Match {{ game.homeTeam.name }} vs {{ game.awayTeam.name }} - Blood Bowl Manager{% endblock %}

{% block body %}
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="bg-white shadow overflow-hidden sm:rounded-lg">
            <div class="px-4 py-5 sm:px-6">
                <div class="flex items-center justify-between mb-4">
                    <div class="text-2xl font-bold text-gray-900">
                        {{ game.homeTeam.name }}
                    </div>
                    <div class="text-4xl font-bold text-gray-900">
                        {{ game.homeScore }} - {{ game.awayScore }}
                    </div>
                    <div class="text-2xl font-bold text-gray-900">
                        {{ game.awayTeam.name }}
                    </div>
                </div>
                <div class="text-center text-lg text-gray-500">
                    Tour {{ game.currentTurn }}
                </div>
            </div>
            <div class="border-t border-gray-200">
                <div class="px-4 py-5 sm:px-6">
                    <div class="flex gap-8">
                        <!-- Terrain de Blood Bowl -->
                        <div class="w-[480px]">
                            <div class="border-4 border-gray-800">
                                {% for i in 1..26 %}
                                    <div class="flex {% if i == 1 %}border-b-2 border-white{% elseif i == 26 %}border-t-2 border-white{% elseif i == 12 %}border-b-2 border-white{% endif %}">
                                        {% for j in 1..15 %}
                                            {% set player = game.playerStates|filter(p => p.x == i and p.y == j)|first %}
                                            <div class="w-8 h-8 {% if i == 1 or i == 26 %}bg-green-500 hover:bg-green-400{% else %}bg-green-700 hover:bg-green-600{% endif %} cursor-pointer relative {% if j == 4 or j == 11 %}border-r-2 border-white{% endif %} player-cell {% if player %}player-cell-{{ player.player.id }}{% endif %}" 
                                                 data-player-id="{{ player ? player.player.id : '' }}"
                                                 data-x="{{ i }}"
                                                 data-y="{{ j }}">
                                                {% if player %}
                                                    <div class="absolute inset-0 flex items-center justify-center text-white text-[8px] font-bold">
                                                        {{ player.player.number }}
                                                    </div>
                                                    {% if player.state == 'prone' %}
                                                        <div class="absolute inset-0 bg-black bg-opacity-50"></div>
                                                    {% elseif player.state == 'stunned' %}
                                                        <div class="absolute inset-0 bg-yellow-500 bg-opacity-50"></div>
                                                    {% elseif player.state == 'ko' %}
                                                        <div class="absolute inset-0 bg-orange-500 bg-opacity-50"></div>
                                                    {% elseif player.state == 'injured' %}
                                                        <div class="absolute inset-0 bg-red-500 bg-opacity-50"></div>
                                                    {% elseif player.state == 'dead' %}
                                                        <div class="absolute inset-0 bg-gray-900 bg-opacity-50"></div>
                                                    {% endif %}
                                                {% endif %}
                                            </div>
                                        {% endfor %}
                                    </div>
                                {% endfor %}
                            </div>

                            <!-- Légende des états -->
                            <div class="mt-4 flex justify-center space-x-4">
                                <div class="flex items-center">
                                    <div class="w-4 h-4 bg-black bg-opacity-50 mr-2"></div>
                                    <span class="text-sm">Prone</span>
                                </div>
                                <div class="flex items-center">
                                    <div class="w-4 h-4 bg-yellow-500 bg-opacity-50 mr-2"></div>
                                    <span class="text-sm">Stunned</span>
                                </div>
                                <div class="flex items-center">
                                    <div class="w-4 h-4 bg-orange-500 bg-opacity-50 mr-2"></div>
                                    <span class="text-sm">KO</span>
                                </div>
                                <div class="flex items-center">
                                    <div class="w-4 h-4 bg-red-500 bg-opacity-50 mr-2"></div>
                                    <span class="text-sm">Injured</span>
                                </div>
                                <div class="flex items-center">
                                    <div class="w-4 h-4 bg-gray-900 bg-opacity-50 mr-2"></div>
                                    <span class="text-sm">Dead</span>
                                </div>
                            </div>

                            <div class="mt-8 text-center">
                                <form method="post">
                                    <input type="hidden" name="action" value="next_turn">
                                    <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                        Tour suivant
                                    </button>
                                </form>
                            </div>
                        </div>

                        <!-- Panneau des informations du joueur -->
                        <div id="playerPanel" class="flex-1 max-w-md hidden">
                            <div class="sticky top-4 bg-white shadow-lg rounded-lg p-4">
                                <div class="flex justify-between items-center mb-4">
                                    <h3 class="text-lg font-bold">Informations du joueur</h3>
                                    <button id="closePanel" class="text-gray-500 hover:text-gray-700">
                                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                        </svg>
                                    </button>
                                </div>
                                <div id="playerInfo" class="space-y-4">
                                    <!-- Les informations du joueur seront injectées ici via JavaScript -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const playerPanel = document.getElementById('playerPanel');
            const playerInfo = document.getElementById('playerInfo');
            const closePanel = document.getElementById('closePanel');
            const playerCells = document.querySelectorAll('.player-cell');
            let selectedPlayerId = null;
            let currentAction = null;
            let actionStatus = null;
            let authorizedActions = {};

            playerCells.forEach(cell => {
                cell.addEventListener('click', function() {
                    const playerId = this.dataset.playerId;
                    if (playerId) {
                        // Débogage: Afficher l'ID du joueur sélectionné
                        console.log('Joueur sélectionné:', playerId);
                        console.log('Type de playerId:', typeof playerId);
                        console.log('ID du jeu:', {{ game.id }});
                        console.log('Type de gameId:', typeof {{ game.id }});
                        
                        // Retirer la sélection précédente
                        if (selectedPlayerId) {
                            document.querySelectorAll(`.player-cell-${selectedPlayerId}`).forEach(cell => {
                                cell.classList.remove('selected-player');
                            });
                        }

                        // Retirer les cases disponibles
                        document.querySelectorAll('.available-move, .dice-roll-required').forEach(cell => {
                            cell.classList.remove('available-move', 'dice-roll-required');
                        });

                        // Ajouter la sélection au nouveau joueur
                        document.querySelectorAll(`.player-cell-${playerId}`).forEach(cell => {
                            cell.classList.add('selected-player');
                        });
                        selectedPlayerId = playerId;

                        // Afficher le panneau
                        playerPanel.classList.remove('hidden');

                        // Récupérer les informations du joueur
                        fetch(`/player/${playerId}/info?gameId={{ game.id }}`)
                            .then(response => response.text())
                            .then(html => {
                                playerInfo.innerHTML = html;
                                
                                // Récupérer l'état actuel du joueur
                                fetch(`/game/{{ game.id }}/player/${playerId}/state`)
                                    .then(response => response.json())
                                    .then(stateData => {
                                        currentAction = stateData.currentAction;
                                        actionStatus = stateData.actionStatus;
                                        
                                        // Mise à jour de l'UI selon l'état
                                        if (stateData.currentAction && stateData.currentAction !== 'none') {
                                            updateActionUI({
                                                currentAction: stateData.currentAction,
                                                actionStatus: stateData.actionStatus,
                                                remainingMovement: stateData.remainingMovement
                                            });
                                            
                                            // Si une action de mouvement est en cours, afficher les mouvements disponibles
                                            if ((stateData.currentAction === 'move' || 
                                                stateData.currentAction === 'blitz' || 
                                                stateData.currentAction === 'pass' || 
                                                stateData.currentAction === 'handoff') && 
                                                stateData.actionStatus === 'in_progress') {
                                                    fetchAvailableMoves({{ game.id }}, selectedPlayerId);
                                            }
                                        }
                                    });
                                
                                // Récupérer les actions autorisées pour ce joueur
                                const gameId = {{ game.id }};
                                console.log('Appel à fetchAuthorizedActions avec gameId=', gameId, 'et playerId=', playerId);
                                fetchAuthorizedActions(gameId, playerId);
                                
                                // Ajouter les écouteurs d'événements pour les boutons d'action
                                addActionEventListeners();
                            })
                            .catch(error => {
                                console.error('Erreur lors de la récupération des informations du joueur:', error);
                            });
                    }
                });
            });

            function fetchAuthorizedActions(gameId, playerId) {
                console.log('fetchAuthorizedActions appelé avec gameId=', gameId, 'et playerId=', playerId);
                
                // S'assurer que gameId et playerId sont des nombres valides
                gameId = parseInt(gameId, 10) || {{ game.id }}; // Fallback sur game.id si gameId n'est pas un nombre
                playerId = parseInt(playerId, 10);
                
                if (isNaN(gameId) || isNaN(playerId)) {
                    console.error('gameId ou playerId invalide dans fetchAuthorizedActions');
                    return;
                }
                
                // Construction explicite de l'URL pour éviter les problèmes de formatage
                const url = `/game/${gameId}/player/${playerId}/authorized-actions`;
                
                // Afficher l'URL dans la console pour débogage
                console.log('Calling authorized actions URL:', url);
                
                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.error) {
                            console.error('Erreur:', data.error);
                            return;
                        }
                        
                        authorizedActions = data.authorized_actions;
                        updateActionButtons();
                    })
                    .catch(error => {
                        console.error('Erreur lors de la récupération des actions autorisées:', error);
                    });
            }
            
            function updateActionButtons() {
                // Si une action est en cours, tous les boutons sont désactivés
                if (currentAction && actionStatus === 'in_progress') {
                    document.querySelectorAll('.action-btn').forEach(button => {
                        button.disabled = true;
                        button.classList.add('opacity-50', 'cursor-not-allowed');
                        button.title = 'Une action est déjà en cours';
                    });
                    return;
                }
                
                // Sinon, mettre à jour les boutons en fonction des autorisations
                document.querySelectorAll('.action-btn').forEach(button => {
                    const action = button.dataset.action;
                    
                    // Si nous avons reçu des informations d'autorisation du serveur
                    if (authorizedActions && typeof authorizedActions[action] !== 'undefined') {
                        if (authorizedActions[action] === false) {
                            // Action non autorisée
                            disableActionButton(button);
                        } else {
                            // Action autorisée
                            enableActionButton(button);
                        }
                    } else {
                        // Si nous n'avons pas encore reçu de réponse du serveur, utiliser les valeurs par défaut
                        const defaultEnabled = button.dataset.defaultEnabled === 'true';
                        if (defaultEnabled) {
                            enableActionButton(button);
                        } else {
                            disableActionButton(button);
                        }
                    }
                });
            }
            
            function disableActionButton(button) {
                const action = button.dataset.action;
                button.disabled = true;
                button.classList.add('opacity-50', 'cursor-not-allowed', 'bg-gray-400');
                
                // Supprimer 'hover:bg-gray-400'
                button.classList.remove('hover:bg-gray-400');
                
                // Récupérer les classes CSS à supprimer
                const cssClasses = getActionButtonColorClass(action);
                
                // Supprimer chaque classe individuellement
                cssClasses.split(' ').forEach(cssClass => {
                    button.classList.remove(cssClass);
                });
                
                button.title = 'Action non autorisée pour ce joueur';
                
                // Ajouter l'indicateur visuel d'action non autorisée
                button.setAttribute('data-disabled-reason', 'unauthorized');
            }
            
            function enableActionButton(button) {
                const action = button.dataset.action;
                button.disabled = false;
                button.classList.remove('opacity-50', 'cursor-not-allowed', 'bg-gray-400');
                
                // Récupérer les classes CSS à ajouter
                const cssClasses = getActionButtonColorClass(action);
                
                // Ajouter chaque classe individuellement (en les séparant par les espaces)
                cssClasses.split(' ').forEach(cssClass => {
                    button.classList.add(cssClass);
                });
                
                button.title = getActionDescription(action);
                
                // Supprimer l'indicateur d'action non autorisée
                button.removeAttribute('data-disabled-reason');
            }
            
            function getActionDescription(action) {
                switch (action) {
                    case 'move': return 'Déplacer le joueur sur le terrain';
                    case 'block': return 'Effectuer un blocage contre un joueur adjacent';
                    case 'blitz': return 'Combiner mouvement et blocage en une seule action';
                    case 'pass': return 'Passer le ballon à un autre joueur';
                    case 'handoff': return 'Transmettre le ballon à un joueur adjacent';
                    case 'foul': return 'Agresser un joueur au sol (action risquée)';
                    default: return '';
                }
            }

            function getActionButtonColorClass(action) {
                switch (action) {
                    case 'move': return 'bg-blue-600 hover:bg-blue-700';
                    case 'block': return 'bg-red-600 hover:bg-red-700';
                    case 'blitz': return 'bg-purple-600 hover:bg-purple-700';
                    case 'pass': return 'bg-green-600 hover:bg-green-700';
                    case 'handoff': return 'bg-yellow-600 hover:bg-yellow-700';
                    case 'foul': return 'bg-gray-600 hover:bg-gray-700';
                    default: return '';
                }
            }

            function addActionEventListeners() {
                // Boutons d'action
                document.querySelectorAll('.action-btn').forEach(button => {
                    button.addEventListener('click', function() {
                        const action = this.dataset.action;
                        
                        if (!selectedPlayerId) {
                            alert('Veuillez sélectionner un joueur');
                            return;
                        }
                        
                        // Vérifier si une action est déjà en cours
                        if (currentAction && actionStatus === 'in_progress') {
                            alert('Une action est déjà en cours. Veuillez terminer ou annuler l\'action actuelle avant d\'en démarrer une nouvelle.');
                            return;
                        }
                        
                        fetch(`/game/{{ game.id }}/player/${selectedPlayerId}/action`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                action: action,
                                status: 'start'
                            })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.error) {
                                alert(data.error);
                                return;
                            }
                            
                            currentAction = data.action;
                            actionStatus = data.status;
                            
                            updateActionUI({
                                currentAction: data.action,
                                actionStatus: data.status,
                                remainingMovement: data.remainingMovement
                            });
                            
                            // Récupérer les mouvements disponibles pour les actions de mouvement
                            if (data.action === 'move' || data.action === 'blitz' || 
                                data.action === 'pass' || data.action === 'handoff') {
                                fetchAvailableMoves({{ game.id }}, selectedPlayerId);
                            }
                            
                            // Rafraîchir l'état du joueur depuis la base de données
                            refreshPlayerState({{ game.id }}, selectedPlayerId);
                        });
                    });
                });
                
                // Compléter une action
                const completeBtn = document.getElementById('complete-action');
                if (completeBtn) {
                    completeBtn.addEventListener('click', function() {
                        if (!selectedPlayerId || !currentAction) {
                            return;
                        }
                        
                        fetch(`/game/{{ game.id }}/player/${selectedPlayerId}/action`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                status: 'complete'
                            })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.error) {
                                alert(data.error);
                                return;
                            }
                            
                            currentAction = data.action;
                            actionStatus = data.status;
                            
                            updateActionUI({
                                currentAction: data.action,
                                actionStatus: data.status,
                                remainingMovement: 0
                            });
                            
                            // Retirer les cases disponibles
                            document.querySelectorAll('.available-move, .dice-roll-required').forEach(cell => {
                                cell.classList.remove('available-move', 'dice-roll-required');
                            });
                            
                            // Rafraîchir l'état du joueur depuis la base de données
                            refreshPlayerState({{ game.id }}, selectedPlayerId);
                        });
                    });
                }
                
                // Annuler une action
                const cancelBtn = document.getElementById('cancel-action');
                if (cancelBtn) {
                    cancelBtn.addEventListener('click', function() {
                        if (!selectedPlayerId || !currentAction) {
                            return;
                        }
                        
                        fetch(`/game/{{ game.id }}/player/${selectedPlayerId}/action`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                status: 'cancel'
                            })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.error) {
                                alert(data.error);
                                return;
                            }
                            
                            currentAction = data.action;
                            actionStatus = data.status;
                            
                            updateActionUI({
                                currentAction: data.action,
                                actionStatus: data.status,
                                remainingMovement: 0
                            });
                            
                            // Retirer les cases disponibles
                            document.querySelectorAll('.available-move, .dice-roll-required').forEach(cell => {
                                cell.classList.remove('available-move', 'dice-roll-required');
                            });
                            
                            // Rafraîchir l'état du joueur depuis la base de données
                            refreshPlayerState({{ game.id }}, selectedPlayerId);
                        });
                    });
                }
            }

            closePanel.addEventListener('click', function() {
                playerPanel.classList.add('hidden');
                // Retirer la sélection
                if (selectedPlayerId) {
                    document.querySelectorAll(`.player-cell-${selectedPlayerId}`).forEach(cell => {
                        cell.classList.remove('selected-player');
                    });
                    selectedPlayerId = null;
                }
                // Retirer les cases disponibles
                document.querySelectorAll('.available-move, .dice-roll-required').forEach(cell => {
                    cell.classList.remove('available-move', 'dice-roll-required');
                });
            });

            // Mise à jour de l'interface des actions
            function updateActionUI(data) {
                const actionStatusDiv = document.querySelector('.action-status');
                if (!actionStatusDiv) return;
                
                if (data.currentAction && data.currentAction !== 'none' && data.actionStatus === 'in_progress') {
                    // Afficher l'action en cours
                    const currentActionEl = document.getElementById('current-action');
                    const remainingMovementEl = document.getElementById('remaining-movement');
                    
                    if (currentActionEl) currentActionEl.textContent = getActionLabel(data.currentAction);
                    if (remainingMovementEl) remainingMovementEl.textContent = data.remainingMovement || 0;
                    
                    actionStatusDiv.classList.remove('hidden');
                    
                    // Désactiver les boutons d'action
                    document.querySelectorAll('.action-btn').forEach(button => {
                        button.disabled = true;
                        button.classList.add('opacity-50', 'cursor-not-allowed');
                    });
                } else {
                    // Cacher l'action en cours
                    actionStatusDiv.classList.add('hidden');
                    
                    // Réactiver les boutons d'action en fonction des autorisations
                    updateActionButtons();
                }
            }
            
            // Récupérer les mouvements disponibles
            function fetchAvailableMoves(gameId, playerId) {
                console.log('fetchAvailableMoves appelé avec gameId=', gameId, 'et playerId=', playerId);
                
                // S'assurer que gameId et playerId sont des nombres valides
                gameId = parseInt(gameId, 10) || {{ game.id }}; // Fallback sur game.id si gameId n'est pas un nombre
                playerId = parseInt(playerId, 10);
                
                if (isNaN(gameId) || isNaN(playerId)) {
                    console.error('gameId ou playerId invalide dans fetchAvailableMoves');
                    return;
                }
                
                // Retirer les anciennes cases disponibles
                document.querySelectorAll('.available-move, .dice-roll-required').forEach(cell => {
                    cell.classList.remove('available-move', 'dice-roll-required');
                });
                
                const url = `/game/${gameId}/player/${playerId}/available-moves`;
                console.log('URL available-moves:', url);
                
                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Available moves:', data.availableMoves);
                        
                        // Retirer les anciennes cases disponibles
                        document.querySelectorAll('.available-move, .dice-roll-required').forEach(cell => {
                            cell.classList.remove('available-move', 'dice-roll-required');
                        });
                        
                        // Ajouter les nouvelles cases disponibles
                        data.availableMoves.forEach(move => {
                            const cell = document.querySelector(`[data-x="${move.x}"][data-y="${move.y}"]`);
                            if (cell) {
                                cell.classList.add(move.requiresDiceRoll ? 'dice-roll-required' : 'available-move');
                                
                                // Ajouter un gestionnaire d'événements pour déplacer le joueur
                                cell.addEventListener('click', function() {
                                    if (!selectedPlayerId) return;
                                    
                                    movePlayer(gameId, selectedPlayerId, move.x, move.y);
                                });
                            }
                        });
                    })
                    .catch(error => {
                        console.error('Erreur lors de la récupération des mouvements disponibles:', error);
                    });
            }
            
            // Déplacer un joueur
            function movePlayer(gameId, playerId, x, y) {
                console.log('movePlayer appelé avec gameId=', gameId, 'et playerId=', playerId);
                
                // S'assurer que gameId et playerId sont des nombres valides
                gameId = parseInt(gameId, 10) || {{ game.id }}; // Fallback sur game.id si gameId n'est pas un nombre
                playerId = parseInt(playerId, 10);
                
                if (isNaN(gameId) || isNaN(playerId)) {
                    console.error('gameId ou playerId invalide dans movePlayer');
                    return;
                }
                
                const url = `/game/${gameId}/player/${playerId}/move`;
                console.log('URL move:', url);
                
                fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        x: x,
                        y: y
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.error) {
                        alert(data.error);
                        return;
                    }
                    
                    // Mettre à jour la position visuelle du joueur
                    const playerCell = document.querySelector(`.player-cell-${playerId}`);
                    if (playerCell) {
                        // Récupérer les coordonnées actuelles
                        const oldX = playerCell.dataset.x;
                        const oldY = playerCell.dataset.y;
                        
                        // Récupérer la case actuelle et la nouvelle case
                        const oldCell = document.querySelector(`[data-x="${oldX}"][data-y="${oldY}"]`);
                        const newCell = document.querySelector(`[data-x="${x}"][data-y="${y}"]`);
                        
                        if (oldCell && newCell) {
                            // Retirer les classes et attributs de l'ancienne case
                            oldCell.classList.remove(`player-cell-${playerId}`);
                            oldCell.dataset.playerId = '';
                            
                            // Ajouter les classes et attributs à la nouvelle case
                            newCell.classList.add(`player-cell-${playerId}`);
                            newCell.dataset.playerId = playerId;
                            newCell.classList.add('selected-player');
                        }
                    }
                    
                    // Mettre à jour le mouvement restant
                    const remainingMovementEl = document.getElementById('remaining-movement');
                    if (remainingMovementEl) {
                        remainingMovementEl.textContent = data.remainingMovement;
                    }
                    
                    // Récupérer les nouveaux mouvements disponibles
                    fetchAvailableMoves(gameId, playerId);
                    
                    // Rafraîchir l'état du joueur depuis la base de données
                    refreshPlayerState(gameId, playerId);
                })
                .catch(error => {
                    console.error('Erreur lors du déplacement du joueur:', error);
                });
            }
            
            // Rafraîchir l'état du joueur depuis la base de données
            function refreshPlayerState(gameId, playerId) {
                console.log('refreshPlayerState appelé avec gameId=', gameId, 'et playerId=', playerId);
                
                // S'assurer que gameId et playerId sont des nombres valides
                gameId = parseInt(gameId, 10) || {{ game.id }}; // Fallback sur game.id si gameId n'est pas un nombre
                playerId = parseInt(playerId, 10);
                
                if (isNaN(gameId) || isNaN(playerId)) {
                    console.error('gameId ou playerId invalide dans refreshPlayerState');
                    return;
                }
                
                const url = `/game/${gameId}/player/${playerId}/state`;
                console.log('URL state:', url);
                
                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(stateData => {
                        currentAction = stateData.currentAction;
                        actionStatus = stateData.actionStatus;
                        
                        updateActionUI({
                            currentAction: stateData.currentAction,
                            actionStatus: stateData.actionStatus,
                            remainingMovement: stateData.remainingMovement
                        });
                        
                        // Récupérer aussi les actions autorisées
                        console.log('Appel à fetchAuthorizedActions depuis refreshPlayerState avec gameId=', gameId, 'et playerId=', playerId);
                        fetchAuthorizedActions(gameId, playerId);
                    })
                    .catch(error => {
                        console.error('Erreur lors de la récupération de l\'état du joueur:', error);
                    });
            }
            
            // Obtenir le libellé d'une action
            function getActionLabel(action) {
                const labels = {
                    'move': 'Mouvement',
                    'block': 'Blocage',
                    'blitz': 'Blitz',
                    'pass': 'Passe',
                    'handoff': 'Transmission',
                    'foul': 'Agression'
                };
                return labels[action] || action;
            }
        });
    </script>

    <style>
        .selected-player {
            position: relative;
        }
        .selected-player::after {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            border: 2px solid #3B82F6;
            border-radius: 50%;
            z-index: 10;
            animation: pulse 2s infinite;
        }
        .available-move {
            position: relative;
        }
        .available-move::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border: 2px solid #3B82F6;
            z-index: 5;
            animation: pulse 2s infinite;
            border-radius: 0;
        }
        .dice-roll-required {
            position: relative;
        }
        .dice-roll-required::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border: 2px solid #F97316;
            z-index: 5;
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% {
                transform: scale(1);
                opacity: 1;
            }
            50% {
                transform: scale(1.05);
                opacity: 0.8;
            }
            100% {
                transform: scale(1);
                opacity: 1;
            }
        }
        
        /* Styles pour les boutons d'action */
        .action-btn {
            position: relative;
            transition: all 0.2s ease;
        }
        
        .action-btn:disabled {
            box-shadow: none;
            cursor: not-allowed;
        }
        
        .action-btn:disabled::before {
            content: '⛔';
            position: absolute;
            top: -8px;
            right: -8px;
            font-size: 14px;
            z-index: 10;
        }
        
        /* Style pour les boutons en attente de chargement */
        .action-btn[data-disabled-reason="unauthorized"]::before {
            content: '⛔';
        }
        
        /* Style pour les tooltips */
        .action-btn[title]:hover::after {
            content: attr(title);
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            padding: 5px 10px;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            border-radius: 4px;
            font-size: 12px;
            white-space: nowrap;
            z-index: 100;
            margin-bottom: 5px;
        }
        
        /* Indicateur de chargement pour les actions */
        .action-btn.loading::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.2);
            border-radius: 0.25rem;
            z-index: 5;
        }
        
        /* Label d'état des actions */
        .action-status-label {
            display: inline-block;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 10px;
            text-transform: uppercase;
            margin-top: 2px;
        }
        
        .action-status-allowed {
            background-color: #10B981;
            color: white;
        }
        
        .action-status-forbidden {
            background-color: #EF4444;
            color: white;
        }
    </style>
{% endblock %} 